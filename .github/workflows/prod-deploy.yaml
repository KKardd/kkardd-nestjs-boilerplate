name: Deploy to App Runner For Prod - Image based
on:
  push:
    branches: [production] # Trigger workflow on git push to main branch
  workflow_dispatch: # Allow manual invocation of the workflow
jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          persist-credentials: false

      - name: Configure AWS credentials
        id: aws-credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.PROD_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PROD_AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          # 이름 바꾸기
          ECR_REPOSITORY: kwangsaeng
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f docker/prod-dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Deploy to App Runner
        id: deploy-apprunner
        uses: awslabs/amazon-app-runner-deploy@main
        env:
          SERVER_PORT: ${{ secrets.PROD_SERVER_PORT }}
          DATABASE_TYPE: ${{ secrets.PROD_DATABASE_TYPE }}
          DATABASE_HOST: ${{ secrets.PROD_DATABASE_HOST }}
          DATABASE_PORT: ${{ secrets.PROD_DATABASE_PORT }}
          DATABASE_USERNAME: ${{ secrets.PROD_DATABASE_USERNAME }}
          DATABASE_PASSWORD: ${{ secrets.PROD_DATABASE_PASSWORD }}
          DATABASE_NAME: ${{ secrets.PROD_DATABASE_NAME }}
          DATABASE_SYNC: ${{ secrets.PROD_DATABASE_SYNC }}
          DATABASE_CRT: ${{ secrets.PROD_DATABASE_CRT }}
          AWS_ACCESS_KEY: ${{ secrets.PROD_AWS_ACCESS_KEY}}
          AWS_SECRET_KEY: ${{ secrets.PROD_AWS_SECRET_KEY}}
          AWS_REGION: ap-northeast-1
          S3_BUCKET_NAME: ${{ secrets.PROD_S3_BUCKET_NAME}}
          JWT_ACCESS_SECRET: ${{ secrets.JWT_ACCESS_SECRET }}
          JWT_ACCESS_EXPIRES: ${{ secrets.JWT_ACCESS_EXPIRES }}
          JWT_REFRESH_SECRET: ${{ secrets.JWT_REFRESH_SECRET }}
          JWT_REFRESH_EXPIRES: ${{ secrets.JWT_REFRESH_EXPIRES }}
          ALIGO_API_KEY: ${{ secrets.ALIGO_API_KEY }}
          ALIGO_USER_ID: ${{ secrets.ALIGO_USER_ID }}
          ALIGO_SENDER: ${{ secrets.ALIGO_SENDER }}
          REDIS_HOST: ${{ secrets.PROD_REDIS_HOST }}

        with:
          # 이름 바꾸기
          service: prod-kwangsaeng-api-server
          image: ${{ steps.build-image.outputs.image }}
          access-role-arn: ${{ secrets.PROD_ROLE_ARN }}
          runtime: NODEJS_16
          region: ap-northeast-1
          cpu: 1
          memory: 2
          port: 3000
          copy-env-vars: |
            SERVER_PORT
            DATABASE_TYPE
            DATABASE_HOST
            DATABASE_PORT
            DATABASE_USERNAME
            DATABASE_PASSWORD
            DATABASE_NAME
            DATABASE_SYNC
            DATABASE_CRT
            AWS_ACCESS_KEY
            AWS_SECRET_KEY
            AWS_REGION
            S3_BUCKET_NAME
            JWT_ACCESS_SECRET
            JWT_ACCESS_EXPIRES
            JWT_REFRESH_SECRET
            JWT_REFRESH_EXPIRES
            ALIGO_API_KEY
            ALIGO_USER_ID
            ALIGO_SENDER
            REDIS_HOST
          wait-for-service-stability: true

      - name: App Runner output
        run: echo "App runner output ${{ steps.deploy-apprunner.outputs.service-id }}"
